#! /usr/bin/perl
################################################################################
## holidata.net - data generator
##
##   Scans a specified directory for authoritative CSV files that are to be read
##   and rewritten into the docroot in various formats.
##
## Copyright 2011, GÃ¶teborg Bit Factory.
## All rights reserved.
##
################################################################################

use strict;
use warnings;
use Getopt::Long;

my $help = 0;
my $data_dir;
my $docroot;

# Command line options, argument validation.
Getopt::Long::GetOptions (
  'help'      => \$help,
  'data=s'    => \$data_dir,
  'docroot=s' => \$docroot);

if ($help || !$data_dir || !$docroot)
{
  print <<EOF;

usage: gen-data [--help] --data /data/path --docroot /docroot/path

  --help           Displays this message.
  --data           Location of the authoritative CSV files.
  --docroot        Location for generated output.

EOF

  exit 1;
}

die "'$data_dir' is not a directory\n" if ! -d $data_dir;
die "'$docroot' is not a directory\n"  if ! -d $docroot;

# For each file.
for my $file (glob $data_dir . '/*.csv')
{
  print $file, "\n";
  if (open my $fh, '<', $file)
  {
    my @data;
    while (my $line = <$fh>)
    {
      next if $line =~ /^\s*$/;
      next if $line =~ /^\s*#/;
      $line =~ s/#.+$//;
      push @data, [$1,$2,$3,$4,$5,$6]
        if $line =~ /^
                     \s*"([^"]*)", # locale
                     \s*"([^"]*)", # region
                     \s*"([^"]*)", # date
                     \s*"([^"]*)", # description
                     \s*"([^"]*)", # type
                     \s*"([^"]*)"  # notes
                     \s*
                     $/x;
    }
    close $fh;

    # Determine locales.
    my %locales = map {$_->[0] => undef} @data;

    # For each locale.
    for my $locale (keys %locales)
    {
      # Make sure the locale dir exists.
      my $location = $docroot . '/' . $locale;
      mkdir $location unless -d $location;

      # Determine years.
      my %years;
      for my $holiday (@data)
      {
        next unless $holiday->[0] eq $locale;
        my ($year) = $holiday->[2] =~ /^(\d{4})-/;
        $years{$year} = undef;
      }

      # For each year.
      for my $year (sort keys %years)
      {
        # Generate CSV file.
        if (open my $fh, '>', $location . '/' . $year . '.csv')
        {
          print "  $location/$year.csv\n";
          print $fh qq{"locale","region","date","description","type","notes"\n};
          for my $holiday (@data)
          {
            next unless $holiday->[0] eq $locale;
            next unless $holiday->[2] =~ /^$year/;
            print $fh join (",", map {"\"$_\""} @$holiday), "\n";
          }
          close $fh;
        }

        # Generate XML file.
        if (open my $fh, '>', $location . '/' . $year . '.xml')
        {
          print "  $location/$year.xml\n";
          print $fh "<?xml version=\"1.0\" ?>\n",
                    "<holidays>\n";
          for my $holiday (@data)
          {
            next unless $holiday->[0] eq $locale;
            next unless $holiday->[2] =~ /^$year/;

            print $fh "  <holiday>\n",
                      "    <locale>",      $holiday->[0], "</locale>\n",
                      "    <region>",      $holiday->[1], "</region>\n",
                      "    <date>",        $holiday->[2], "</date>\n",
                      "    <description>", $holiday->[3], "</description>\n",
                      "    <type>",        $holiday->[4], "</type>\n",
                      "    <notes>",       $holiday->[5], "</notes>\n",
                      "  </holiday>\n";
          }

          print $fh "</holidays>\n";
          close $fh;
        }

        # Generate YAML file.
        if (open my $fh, '>', $location . '/' . $year . '.yaml')
        {
          print "  $location/$year.yaml\n";
          print $fh "%YAML 1.1\n",
                    "---\n";

          for my $holiday (@data)
          {
            next unless $holiday->[0] eq $locale;
            next unless $holiday->[2] =~ /^$year/;

            print $fh "  holiday:\n",
                      "    locale: ",      $holiday->[0], "\n",
                      "    region: ",      $holiday->[1], "\n",
                      "    date: ",        $holiday->[2], "\n",
                      "    description: ", $holiday->[3], "\n",
                      "    type: ",        $holiday->[4], "\n",
                      "    notes: ",       $holiday->[5], "\n";
          }

          print $fh "...\n";
          close $fh;
        }

        # Generate JSON file.
        if (open my $fh, '>', $location . '/' . $year . '.json')
        {
          print "  $location/$year.json\n";
          for my $holiday (@data)
          {
            next unless $holiday->[0] eq $locale;
            next unless $holiday->[2] =~ /^$year/;
            print $fh "{\"locale\":\"",     $holiday->[0], "\",",
                      "\"region\":\"",      $holiday->[1], "\",",
                      "\"date\":\"",        $holiday->[2], "\",",
                      "\"description\":\"", $holiday->[3], "\",",
                      "\"type\":\"",        $holiday->[4], "\",",
                      "\"notes\":\"",       $holiday->[5], "\"}\n";
          }
          close $fh;
        }
      }
    }
  }
}

exit 0;

